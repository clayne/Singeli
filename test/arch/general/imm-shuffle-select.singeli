include '../base'
include 'util/tup'
if_inline (hasarch{'X86_64'}) {
  include 'arch/iintrinsic/basic'
  include 'arch/iintrinsic/select'
} else if_inline (hasarch{'AARCH64'}) {
  include 'arch/neon_intrin/basic'
  include 'arch/neon_intrin/select'
} else {
  def {vec_shuffle,vec_select,vec_make}
}

def expand{e, t} = replicate{e, t}*e + cycle{e*length{t}, range{e}}
def gen_idxs{n} = (3 * (1-range{n})) % n

def widths{min, max} = tup{min, ...widths{min*2, max}}
def widths{min, max if min>max} = tup{}
def widths{v, v} = tup{v}

main() : void = {
  fn test{sw, V}(counts:*u64) : void = {
    def vw = width{V}

    def inc_ok{ok} = store{counts, ok, load{counts, ok}+1}
    def elts = example_elts{V}
    def vec = vec_make{V, elts}

    def has_int{lw} = not (lw==256 and not hasarch{'AVX2'})
    def qualities{lw} = {
      def i = has_int{lw}
      replicate{tup{i,i,sw>=32}, tup{'u','i','f'}}
    }

    if (sw<=64) @for_tup(lw in widths{sw, vw} over '!') {
      # vec_shuffle{[n]vw (width=lw), v:V (width=vw)}; n = elements
      def n = lw/sw
      def idxs = gen_idxs{n}
      def ok = match() {
        {if sw==16 and vw==128 and lw<=64} => 1
        {if sw== 8 and hasarch{'AVX512VBMI'}} => 1
        {if sw==16 and hasarch{'AVX512BW'}} => 1
        {if sw<=16 and vw==256} => hasarch{'AVX2'} and lw<=128
        {if sw<=16 and vw==128} => hasarch{'SSSE3'}
        {if sw<=16} => 0
        {if lw>=256 and not hasarch{'AVX2'}} => 0
        {} => 1
      }
      inc_ok{ok}
      if (ok) {
        @for_tup(quality in qualities{lw} over '!') {
          def spec = [n]primtype{quality, sw}
          def scale = sw/width{eltype{V}}
          def e1 = expand{scale, idxs}
          def e2 = join{each{{i} => e1+i*n*scale, range{vw/lw}}}
          # show{'V=',V, ' lw=',lw, ' n=',n, ' spec=',spec}
          # lprintf{'V=',V, ' lw=',lw, ' n=',n, ' spec=',spec}
          def exp = vec_make{V, select{elts, e2}}
          test_exp{exp, vec_shuffle}{spec, vec, idxs}
        }
      } # else show{'missed V=',V, ' lw=',lw, ' n=',n, ' spec=',[n]primtype{'u', sw}}
    }

    def select_ok = match() {
      {if sw<=16 and not hasarch{'SSSE3'}} => 0
      {if sw<=16 and vw>=256 and not hasarch{if (sw==8) 'AVX512VBMI' else 'AVX512BW'}} => 0
      {if sw<=16 and vw==256 and not hasarch{'AVX2'}} => 0
      {if vw==256 and not hasarch{'AVX2'}} => 0
      {..._} => 1
    }
    inc_ok{select_ok}
    if (select_ok) {
      def n = vw/sw
      def idxs = gen_idxs{n}

      def exp = {
        def scale = sw/width{eltype{V}}
        vec_make{V, select{elts, expand{scale, idxs}}}
      }

      @for_tup(spec in merge{
        copy{has_int{vw} or quality{eltype{V}}=='f', sw},
        each{{q}=>primtype{q,sw}, if (sw<=64) qualities{vw} else tup{}}
      } over '!') {
        # show{'spec=',spec, ' V=',V}
        test_exp{exp, vec_select}{spec, vec, idxs}
        test_exp{exp, vec_select}{spec, vec, ...idxs}
      }
    }
  }

  counts:*u64 = tup{0,0}
  if (hasarch{'X86_64'}) {
    @for_tup(sw in tup{8,16,32,64,128} over '!') {
      @for_tup(E in primtypes over '!') {
        if (sw>=width{E}) @for_tup(w in supported_widths{1} over '!') {
          def V = [w/width{E}]E
          test{sw, V}(counts)
        }
      }
    }
  } else {
    lprintf{'no tests defined for this arch'}
    exit{1}
  }
  lprintf{'pass; untestable: ', load{counts,0}, '/', load{counts,0}+load{counts,1}}
}
