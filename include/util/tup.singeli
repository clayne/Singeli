# Tuple utilities

local {
  include 'skin/cop'
  oper $ length prefix 30
  oper > tail   prefix 50
  def __pnt{t} = select{t, 0}
  def tail{tup} = slice{tup, 1}

  include 'util/kind'
  def sl{l, start, len} = slice{l, start, start + len}
}

# Tuple is empty
def empty{tup} = 0 == $tup

# Constant-time evaluation returning a list
def collect{vars,begin,end,exec if begin<=end} = {
  def inds = begin + range{end-begin}
  each{exec{., vars}, inds}
}

# Integers [0,n)
def iota{n if knum{n}} = range{n}

# All indices into tuple t
def inds{t} = range{$t}

# Tuple of n copies of v
def copy{n, v if knum{n}} = each{{_}=>v, range{n}}

# Merge a tuple of tuples
def join{l} = merge{...l}

# Shift l into r, retaining length of r, or vice-versa
def shiftright{l, r} = slice{merge{l, r}, 0, $r}
def shiftleft {l, r} = slice{merge{l, r}, - $l}

# Reversed tuple
def reverse{t} = select{t, ($t-1) - inds{t}}

# Tuple of length n made from t repeated cyclically
def cycle{n, t if knum{n}} = {
  def l = $t
  def m = n % l; def e = slice{t, 0, m}
  if (m == n) e
  else merge{...copy{(n-m)/l, t}, e}
}

# Split into groups of length n, possibly less for the last
def split{n, list if knum{n}} = {
  def d = __ceil{($list) / n}
  each{sl{list, ., n}, n*range{d}}
}
def split{n, list if ktup{n}} = {
  def start = shiftright{0, scan{+,n}}
  each{sl{list,...}, start, n}
}

# Transpose tuple of tuples, assuming each has the same length
def flip{tup} = table{{i,t}=>select{t,i}, inds{*tup}, tup}

# Function table mapping over all combinations
def table{f, ...tups} = {
  if (empty{tups}) f{}
  else if (1 == $tups) each{f, *tups}
  else each{{e} => table{f{e,...}, ...>tups}, *tups}
}
# Flattened into a single list
def flat_table{f, ...tups} = {
  if (empty{tups}) tup{f{}}
  else if (1 == $tups) each{f, *tups}
  else join{each{{e} => flat_table{f{e,...}, ...>tups}, *tups}}
}

# Left fold, with or without initial element
def fold{f, init, list} = {
  if (empty{list}) init
  else fold{f, f{init, *list}, >list}
}
def fold{f, list} = fold{f, *list, >list}

# Low-stack inclusive+exclusive scan implementation
local def scan_full = match {
  {f, init, {}}  => tup{init}
  {f, init, {x}} => tup{init, f{init, x}}
  {f, init, list} => {
    def m = length{list} >> 1
    def l = scan_full{f, init, slice{list, 0, m}}
    merge{l, scan{f, select{l, -1}, slice{list, m}}}
  }
}
# Inclusive left scan
def scan{f, init, list} = slice{scan_full{f, init, list}, 1}
def scan{f, {}} = tup{}
def scan{f, {h, ...t}} = scan_full{f, h, t}

# Copy list elements based on list, constant, or generator (like filter)
def replicate{reps, list} = join{each{copy, reps, list}}
def replicate{r, list if knum{r}} = join{each{copy{r,.}, list}}
def replicate{f, list if kgen{f}} = replicate{each{f,list}, list}

# For boolean i, return indices of 1s
def indices{i} = replicate{i, inds{i}}
