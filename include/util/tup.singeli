# Tuple utilities

local {
  include 'skin/cop'
  oper $ tuplen prefix 30
  oper > tail   prefix 50
  def __pnt{t} = tupsel{0,t}
  def tail{tup} = slice{tup, 1}

  include 'util/kind'
  def sl{l, start, len} = slice{l, start, start + len}
}

# Tuple is empty
def empty{tup} = 0 == $tup

# Constant-time evaluation returning a list
def collect{vars,begin,end,block & begin<=end} = {
  def c{i,l} = {
    def r = exec{i, vars, block}
    merge{tup{r}, c{i+1, l}}
  }
  def c{l,l} = tup{}
  c{begin,end}
}

# Integers [0,n)
def iota{n & knum{n}} = @collect (i to n) i

# All indices into tuple t
def inds{t} = iota{$t}

# Tuple of n copies of v
def copy{n, v & knum{n}} = @collect (n) v

# Merge a tuple of tuples
def join{l} = apply{merge,l}

# Shift l into r, retaining length of r, or vice-versa
def shiftright{l, r} = slice{merge{l, r}, 0, $r}
def shiftleft {l, r} = slice{merge{l, r}, - $l}

# Reversed tuple
def reverse{t} = each{{i}=>tupsel{i,t}, ($t-1) - inds{t}}

# Tuple of length n made from t repeated cyclically
def cycle{n, t & knum{n}} = {
  def l = $t
  def m = n % l; def e = slice{t, 0, m}
  if (m == n) e
  else join{merge{copy{(n-m)/l, t}, tup{e}}}
}

# Split into groups of length n, possibly less for the last
def split{n, list & knum{n}} = {
  def l = $list
  def d = (l + (-l)%n) / n
  @collect (i to d) sl{list, i*n, n}
}
def split{n, list & ktup{n}} = {
  def start = shiftright{0, scan{+,n}}
  each{bind{sl, list}, start, n}
}

# Transpose tuple of tuples, assuming each has the same length
def flip{tup} = table{tupsel, inds{*tup}, tup}

# Function table mapping over all combinations
local def table_apply{fn, tups} = {
  if (empty{tups}) fn{}
  else if (1 == $tups) each{fn, *tups}
  else each{{e} => table_apply{bind{fn,e}, >tups}, *tups}
}
def table{fn, ...t} = table_apply{fn, t}

# Left fold, with or without initial element
def fold{fn, init, list} = {
  if (empty{list}) init
  else fold{fn, fn{init, *list}, >list}
}
def fold{fn, list} = fold{fn, *list, >list}

# Inclusive left scan
def scan{fn, init, list} = scan_sub{fn, {e} => fn{init, e}, list}
def scan{fn, list}       = scan_sub{fn, {e} => e, list}
local def scan_sub{fn, get, list} = {
  if (empty{list}) list
  else {
    def r = get{*list}
    merge{tup{r}, scan{fn, r, >list}}
  }
}

# Copy list elements based on list, constant, or generator (like filter)
def replicate{reps, list} = join{each{copy, reps, list}}
def replicate{r, list & knum{r}} = join{each{bind{copy, r}, list}}
def replicate{f, list & kgen{f}} = replicate{each{f,list}, list}

# For boolean i, return indices of 1s
def indices{i} = replicate{i, inds{i}}
