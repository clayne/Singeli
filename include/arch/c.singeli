def ar_promote{fn} = {
  def fn{a:T,b & match{'number',kind{b}}} = fn{a , cast{T,b}}
  def fn{a,b:T & match{'number',kind{a}}} = fn{cast{T,a} , b}
}
def ar_arith{fn, op} = {
  def fn{a:T,b:T} = emit{T, op, a, b}
  ar_promote{fn}
}
def ar_compare{fn, op} = {
  def fn{a:T,b:T} = emit{u1, op, a, b}
  ar_promote{fn}
}

def __pnt{a:T & match{'pointer',typekind{T}}} = load{a,0}

def arith1{fn, op} = { def fn{a:T} = emit{T, op, a}; fn }
def __neg = arith1{__neg, '-'}

def __add = ar_arith{__add, 'op +'}
def __sub = ar_arith{__sub, 'op -'}
def __mul = ar_arith{__mul, 'op *'}
def __div = ar_arith{__div, 'op /'}

def __eq  = ar_compare{__eq, 'op =='}
def __ne  = ar_compare{__ne, 'op !='}
def __gt  = ar_compare{__gt, 'op >' }
def __ge  = ar_compare{__ge, 'op >='}
def __lt  = ar_compare{__lt, 'op <' }
def __le  = ar_compare{__le, 'op <='}

def logic = ar_arith
def __and = logic{__and, 'op &'}
def __or  = logic{__or , 'op |'}
def __xor = logic{__xor, 'op ^'}
def logic1 = arith1

def __not = logic1{__not, '~'}
def __not{a:u1} = emit{u1, '!', a}

def __shl = logic{__shl, 'op <<'}
def __shr = logic{__shr, 'op >>'}

def cast_p{T, x} = emit{T, '(void*)', x}
def cast_i{T, x} = emit{T, '', x}
def assert{X} = emit{void, 'si_assert', X}
