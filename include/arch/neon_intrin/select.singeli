local {
  include 'skin/cop'
  include 'util/kind'
  oper ~~ reinterpret infix right 55
  def all{t} = is{t, 0 <= t}

  def emit_intrin{V=[_]T, name, ...args} = {
    def intrin = merge{
      name,
      match (width{V}) { {128}=>'q'; {64}=>'' },
      '_',
      match (quality{T}) { {'i'}=>'s'; {q}=>q },
      fmtnat{width{T}}
    }
    emit{V, intrin, ...args}
  }
}

local def vqtbl{...TS, vals={v0:V, ..._}, ind} = {
  def S = match (...TS) {
    {T if width{T}==8} => [16]T
    {} => if (V == [16]i8) V else [16]u8
  }
  def l = length{vals}
  def name = merge{if (l>1) 'unpacked_' else '', 'vqtbl', fmtnat{l}}
  def shuf = emit_intrin{S, name, ..., [16]u8~~ind}
  if (V == S) shuf{...vals} else V~~shuf{...each{~~{S,.}, vals}}
}

# Start with constant-index cases
local def widen_norm_ind{ind, e} = {
  def wi = if (e == 1) ind else merge{...each{+{.,range{e}}, e*ind}}
  __max{wi,-1} % 256
}

# For convenience, allow indices to be written directly without tup
def vec_select {val, ...inds if 1 < length{inds}} = vec_select {val, inds}
def vec_shuffle{val, ...inds if 1 < length{inds}} = vec_shuffle{val, inds}
def vec_select {spec if knum{spec} or ktyp{spec}, val, ...inds if 1 < length{inds}} = vec_select {spec, val, inds}
def vec_shuffle{spec if knum{spec} or ktyp{spec}, val, ...inds if 1 < length{inds}} = vec_shuffle{spec, val, inds}

def vec_select{...spec, val:V=[_]vT, {...ind} if all{each{knum,ind}}} = {
  def w = match (...spec) {
    {n if knum{n}} => n; {T if ktyp{T}} => width{T}; {} => width{vT}
  }
  def 1 = w >= 8
  def {n,n} = tup{width{V}/w, length{ind}}
  def 1 = all{ind < n}
  vqtbl{tup{val}, vec_make{[16]u8, widen_norm_ind{ind, w / 8}}}
}

def vec_shuffle{...spec, val:V=[_]vT, {...inds}} = {
  # inds doesn't have the element type so it comes from spec or val
  def T = match (...spec) {
    {[_]T} => T; {T if ktyp{T}} => T
    {n if knum{n}} => vT; {} => vT
  }
  # sel_n is the number of indices in a selection unit
  # It can be specified by spec as a number or length of vector type
  # and/or by the length of each list in nested inds
  def spec_n = match (...spec) {
    {[k]_} => tup{k}; {k if knum{k}} => tup{k}; {..._} => tup{}
  }
  def {ind_n, ind} = match (inds) {
    {{{...t}, ..._}} => {
      def l = length{t}
      def 1 = all{l == each{length, inds}}
      tup{tup{l}, merge{...inds}}
    }
    {_} => {
      each{{s} => { def 0 = length{inds} % s }, spec_n}
      tup{tup{}, inds}
    }
  }
  def sel_n = match(...spec_n, ...ind_n) {  # Shuffle unit from spec and nested indices must match
    {n,n} => n; {n} => n; {} => length{ind}
  }
  def 1 = all{ind < sel_n}

  def e = width{T} / 8
  def exp{i} = if (16 <= length{i}) i else exp{merge{i, i}}
  def off{i} = i + (range{length{i}} & -e*sel_n)
  def vind = vec_make{[16]u8, off{exp{widen_norm_ind{ind, e}}}}
  vqtbl{tup{val}, vind}
}

# Variable indices
def check_select{spec, vals, V} = {
  def l = length{vals}
  def v = l==1 or (l<=4 and all{V == each{type,vals}})
  v and (match (...spec) { {}=>1; {8}=>1; {T} => ktyp{T} })
}
def vec_select{...spec, vals={v0:V=[_]vT, ..._}, ind:[16]I if check_select{spec, vals, V}} = {
  def T = match (...spec) { {T if ktyp{T}} => T; {..._} => vT }
  vqtbl{T, vals, ind}
}
def vec_select{...spec, val:V=[_]_,  ind:[16]I} = vec_select{...spec, tup{val}, ind}

def vec_shuffle{...spec, val:V=[_]vT, ind:[16]I} = {
  def T = match (...spec) {
    {[16]T} => T; {T if ktyp{T}} => T; {16} => vT; {} => vT
  }
  vqtbl{T, tup{val}, ind}
}


# Shifts
def vec_merge_shift_left {a:V=[_]_, b:V, n if knum{n}} = emit_intrin{V, 'vext', b, a, n}
def vec_merge_shift_right{a:V=[k]_, b:V, n} = vec_merge_shift_left{a, b, k - n}
def vec_shift_left {x:V=[_]_, n} = vec_merge_shift_left {x, vec_broadcast{V,0}, n}
def vec_shift_right{x:V=[_]_, n} = vec_merge_shift_right{x, vec_broadcast{V,0}, n}

def zip{a:V=[_]_, b:V, half} = {
  def name = merge{'vzip', match (half) { {0}=>'1'; {1}=>'2' }}
  emit_intrin{V, name, a, b}
}
def reverse_units{n, x:V=[l]T if knum{n} and 1<n and n<l and l%n == 0} = {
  emit_intrin{V, merge{'vrev', fmtnat{n*width{T}}}, x}
}
# NEON supports bitwise blending only
def blend_bit{f:V=[k]T, t:V, m:M=[k]_ if width{V}==width{M}} = {
  emit_intrin{V, 'vbsl', m, t, f}
}
def blend_hom{f:V=[k]T, t:V, m:M=[k]_} = blend_bit{f, t, m}

# For x86 compatibility
def vec_shift_left_128  = vec_shift_left
def vec_shift_right_128 = vec_shift_right
def vec_merge_shift_left_128  = vec_merge_shift_left
def vec_merge_shift_right_128 = vec_merge_shift_right
def zip128 = zip
