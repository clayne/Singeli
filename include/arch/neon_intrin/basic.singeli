local {
  include 'skin/c'
  oper ~~ reinterpret infix right 55
  def num{x} = 'number'==kind{x}

  def ew{V} = width{eltype{V}}
  def va{V} = 'vector'==typekind{V} and __or{...tup{64,128}==width{V}}
  def vi{V} = va{V} and isint{eltype{V}}
  def vs{V} = va{V} and __or{...tup{'i','f'}==quality{eltype{V}}}
  def vu{V} = va{V} and 'u'==quality{eltype{V}}
  def vf{V} = va{V} and isfloat{eltype{V}}

  def change_qual{V,q} = [vcount{V}]primtype{q, ew{V}}
  def uns = change_qual{.,'u'}

  def intrin{name, ...s, V} = {
    def T = eltype{V}
    def q = quality{T}
    def w = if (128==width{V}) 'q' else ''
    merge{name, w, ...s, '_', if (q=='i') 's' else q, fmtnat{width{T}}}
  }
}

# Building vectors from scalars
local {
  def can_elt{V,x} = num{x} or hastype{x, eltype{V}}
  def can_make_sub = can_elt
  def can_make_sub{V,x & 'tuple'==kind{x}} = {
    def all{t} = {
      def l = tuplen{t}
      if (l==1) select{t,0}
      else { def h=l>>1; all{slice{t,0,-h} & slice{t,h}} }
    }
    vcount{V}==tuplen{x} and all{each{can_elt{V,.}, x}}
  }
  def can_make{V,x} = va{V} and can_make_sub{V,x}
  def mv_sub{V, x} = {
    def T = eltype{V}
    tmp:*T = each{cast{T,.}, x}
    load{*V~~tmp, 0}
  }
}
def vec_make{V, ...x & can_make{V,x}} = mv_sub{V, x}
def vec_make{V, x & 'tuple'==kind{x} & can_make{V,x}} = mv_sub{V, x}
def vec_broadcast{V, x & can_make{V,x}} = emit{V, intrin{'vdup', '_n', V}, x}

def load{a:P, n & va{eltype{P}}} = {
  def V = eltype{P}
  emit{V, intrin{'vld1', V}, *eltype{V} ~~ (a+n)}
}
def store{a:*V, n, v:V & va{V}} = emit{void, intrin{'vst1', V}, *eltype{V} ~~ (a+n), v}

def extract{x:V,n & va{V} & num{n}} = emit{eltype{V}, intrin{'vget', '_lane', V}, x, n}
def insert{a:V, x, i & va{V} & num{i} & can_elt{V,x}} = {
  emit{V, intrin{'vset', '_lane', V}, cast{eltype{V}, x}, a, i}
}

def   __or{a:V,b:V & vf{V}} = {def U = uns{V}; V~~ __or{U~~a, U~~b} }
def  __and{a:V,b:V & vf{V}} = {def U = uns{V}; V~~__and{U~~a, U~~b} }
def  __xor{a:V,b:V & vf{V}} = {def U = uns{V}; V~~__xor{U~~a, U~~b} }
def  __add{a:V,b:V & va{V}} = emit{V, intrin{'vadd', V}, a, b}
def  __sub{a:V,b:V & va{V}} = emit{V, intrin{'vsub', V}, a, b}
def  __mul{a:V,b:V & va{V}} = emit{V, intrin{'vmul', V}, a, b}
def  __div{a:V,b:V & vf{V}} = emit{V, intrin{'vdiv', V}, a, b}
def  __and{a:V,b:V & vi{V}} = emit{V, intrin{'vand', V}, a, b}
def   __or{a:V,b:V & vi{V}} = emit{V, intrin{'vorr', V}, a, b}
def  __xor{a:V,b:V & vi{V}} = emit{V, intrin{'veor', V}, a, b}
def andnot{a:V,b:V & vi{V}} = emit{V, intrin{'vbic', V}, a, b}
def  ornot{a:V,b:V & vi{V}} = emit{V, intrin{'vorn', V}, a, b}
def  andnz{a:V,b:V & vi{V}} = emit{V, intrin{'vtst', V}, a, b}
def  __min{a:V,b:V & va{V}}  = emit{V, intrin{'vmin', V}, a, b}
def  __max{a:V,b:V & va{V}}  = emit{V, intrin{'vmax', V}, a, b}
def  __shl{a:V,b:S & vi{V} & S==uns{V}} = emit{V, intrin{'vshl', V}, a, b}
def __adds{a:V,b:V & vi{V}} = emit{V, intrin{'vqadd', V}, a, b}
def __subs{a:V,b:V & vi{V}} = emit{V, intrin{'vqsub', V}, a, b}
def   addp{a:V,b:V & va{V}} = emit{V, intrin{'vpadd', V}, a, b}

def __shl{a:V, s & vi{V} & num{s} & s>0 & s<ew{V}} = emit{V, intrin{'vshl', '_n', V}, a, s};  def __shl{a:V,s==0 & vi{V}} = a
def __shr{a:V, s & vi{V} & num{s} & s>0 & s<ew{V}} = emit{V, intrin{'vshr', '_n', V}, a, s};  def __shr{a:V,s==0 & vi{V}} = a

def __neg{a:V & vs{V}} = emit{V, intrin{'vneg', V}, a}
def __not{a:V & vu{V}} = { def U=[width{V}/width{u8}]u8; V~~emit{U, intrin{'vmvn', U}, a} }
def __sqrt {a:V & vf{V}} = emit{V, intrin{'vsqrt', V}, a}
def __floor{a:V & vf{V}} = emit{V, intrin{'vrndm', V}, a}
def __ceil {a:V & vf{V}} = emit{V, intrin{'vrndp', V}, a}
def __abs  {a:V & vs{V}} = emit{V, intrin{'vabs', V}, a}

def __eq{a:V,b:V & va{V}} = emit{uns{V}, intrin{'vceq', V}, a, b}
def __ge{a:V,b:V & va{V}} = emit{uns{V}, intrin{'vcge', V}, a, b}
def __gt{a:V,b:V & va{V}} = emit{uns{V}, intrin{'vcgt', V}, a, b}
def __lt{a:V,b:V & va{V}} = emit{uns{V}, intrin{'vclt', V}, a, b}
def __le{a:V,b:V & va{V}} = emit{uns{V}, intrin{'vcle', V}, a, b}
def __ne{a:V,b:V & va{V}} = ~(a==b)
